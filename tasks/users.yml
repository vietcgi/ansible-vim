---
# Create a directory ~/.vim.local in order not to pollute home directory
- name: "[user] Create {{ vim_root_cust_conf_dir }} directory for custom configuration content"
  file: path="{{ vim_root_conf_plug_dir }}" state=directory
  become: yes    # Required for become_user to work
  #become_method: su  # only good for root user to become another user when sudo package is not available
  become_user: "{{ item }}"
  with_items: "{{ vim_users }}"
  tags: vim

- name: "[user] Generating {{ vim_root_config }} from template"
  template:
    src: vimrc.j2
    dest: "{{ vim_root_config }}"
    owner: "{{ item }}"
    group: "{{ item if ansible_os_family != 'Darwin' else 'wheel' if item == 'root' else 'staff' }}"
    mode: 0644
  with_items: "{{ vim_users }}"
  #when: (vim_users is defined and item != "root")
  when: vim_users is defined
  become: yes
  become_user: "{{ item }}"
  tags: vim

- name: "[user] Symlink {{ vim_root_config }} to ~/.vimrc"
  file:
    src: "{{ vim_root_config }}"
    dest: ~/.vimrc
    state: link
    force: yes
  with_items: "{{ vim_users }}"
  become: yes
  become_user: "{{ item }}"
  when: vim_users is defined
  tags: vim

- name: "[user] Generating {{ vim_root_local_config }} from template"
  template:
    src: vimrc.local.j2
    dest: "{{ vim_root_local_config }}"
    owner: "{{ item }}"
    group: "{{ item if ansible_os_family != 'Darwin' else 'wheel' if item == 'root' else 'staff' }}"
    mode: 0644
  with_items: "{{ vim_users }}"
  #when: (vim_users is defined and item != "root")
  when: vim_users is defined
  become: yes
  become_user: "{{ item }}"
  tags: vim

- name: "[user] Generating {{ vim_root_plugins }} from template"
  template:
    src: "{{ vim_pm_config }}.j2"
    dest: "{{ vim_root_plugins }}"
    owner: "{{ item }}"
    group: "{{ item if ansible_os_family != 'Darwin' else 'wheel' if item == 'root' else 'staff' }}"
    mode: 0644
  with_items: "{{ vim_users }}"
  when: vim_users is defined
  become: yes
  become_user: "{{ item }}"
  tags: vim

# CONFIGURE PLUGINS
- name: "[user] Generating the ~/.vim/vim.local/vimrc.{{ plugin }} config files from templates"
  template:
    src: "{{ item.1.src }}"
    dest: "{{ item.1.path }}"
    owner: "{{ item.0 }}"
    group: "{{ item.0 if ansible_os_family != 'Darwin' else 'wheel' if item.0 == 'root' else 'staff' }}"
    mode: 0644
  with_nested:
  - "{{ vim_users }}"
  - "{{ vim_checklist }}"
  - "{{ vim_plugins }}"
  become: yes
  become_user: "{{ item.0 }}"
  when:
  - "vim_users is defined"
  - "item.1.name in item.2.name"
  tags: vim

- name: '[user] Copying .vim folder to ~/.vim'
  copy:
    src: vim/
    dest: ~/.vim/
    owner: "{{ item }}"
    group: "{{ item if ansible_os_family != 'Darwin' else 'wheel' if item == 'root' else 'staff' }}"
  with_items: "{{ vim_users }}"
  when: vim_users is defined
  become: yes
  become_user: "{{ item }}"
  tags: vim

- name: '[user] Download en.utf-8.spl spell file from ftp'
  get_url:
    url: ftp://ftp.vim.org/pub/vim/runtime/spell/en.utf-8.spl
    dest: ~/.vim/spell/en.utf-8.spl
    owner: "{{ item }}"
    group: "{{ item if ansible_os_family != 'Darwin' else 'wheel' if item == 'root' else 'staff' }}"
    mode: 0644
  register: vim_spell_result
  until: vim_spell_result is succeeded
  with_items: "{{ vim_users }}"
  when: vim_users is defined
  become: yes
  become_user: "{{ item }}"
  tags: vim

- name: '[user] Set EDITOR and TERM environment variables'
  blockinfile:
    path: ~/.bashrc
    follow: yes
    owner: "{{ item }}"
    group: "{{ item }}"
    content: |
      export EDITOR="/usr/bin/vim"
      export TERM="xterm-256color"  # For vim colors in tmux
    marker: "# {mark} ======== VIM role: Ansible managed block ========="
  become: yes
  become_user: "{{ item }}"
  with_items: "{{ vim_users }}"
  when: "not 'Darwin' in ansible_os_family"
  tags: vim

- name: "[user] Include {{ vim_plugin_manager }} plugin manager and plugins installation tasks"
  include_tasks: "{{ vim_plugin_manager }}.yml"
  tags: vim
...
